// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = "postgresql://root@localhost:26257/db4?schema=public"
}

model Organization {
  id        String   @id @default(nanoid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?
  users     User[]
}

model User {
  id             String        @id @unique
  email          String        @unique
  name           String?
  // password       String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  auth_session Session[]
  key          Key[]
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Project {
  id               String            @id @default(nanoid())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  name             String?
  description      String?
  defaultLanguage  String?
  translatedLanguages String[]
  storyblokProject StoryblokProject?
  openAIApiKey     String?
  translationPairs TranslationPair[]
}

model TranslationPair {
  id        String   @id @default(nanoid())
  from      String
  to        String
  language        String
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String   @unique
}

model StoryblokProject {
  id             String   @id @default(nanoid())
  storyblokToken String
  spaceId        String
  project        Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId      String   @unique
}
